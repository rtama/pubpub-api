displayName: User
description: Routes to access data about Users
get:
  description: Get the data for a user's profile. This includes associated pubs, forks, journals, etc. Private pubs, private data included if authenticated.
  queryParameters:
    username:
      type: string
      required: true
  responses: 
    200:
      body:
        application/json:
          example: |
            {
              username: "jane"
              firstName: "Jane"
              lastName: "Sanchez"
              image: "https://images.com/1234"
              email: "jane@email.com (if authenticated)"
              bio: "I am a biologist."
              publicEmail: "jane@public.com"
              github: "https://github.com/jane"
              orcid: "123-412-1234-123"
              twitter: "@jane"
              website: "https://www.jane.com"
              googleScholar: "janejane",
              journals: [],
              pubs: [],
              followers: [],
              following: [],

            }
    404:
      body:
        application/json:
          example: |
            {
              error : "User not found"
            }
post:
  description: Create a new User
  body:
    application/json:
      formParameters:
        email: 
          description: email used in SignUp 
          required: true
        hash: 
          description: hash generated by SignUp. Used to validate account creation
          required: true
        username:
          description: username of the new User to be created
          required: true
        firstName:
          description: first name of the new User to be created
          required: true
        lastName:
          description: first name of the new User to be created
          required: true
        image:
          description: image for the new User to be created
          required: true
        password: 
          description: a hash of the users typed password
          required: true
        bio: 
          description: bio for the new User to be created
        publicEmail: 
          description: email that will be publicly displayed for the new User to be created
        github: 
          description: github for the new User to be created
        orcid: 
          description: orcid for the new User to be created
        twitter: 
          description: twitter for the new User to be created
        website: 
          description: website for the new User to be created
        googleScholar: 
          description: googleScholar for the new User to be created
          
  responses:
    200:
      body:
        application/json:
          example: |
            {
              username: "jane"
              firstName: "Jane"
              lastName: "Sanchez"
              image: "https://images.com/1234"
              email: "jane@email.com"
              bio: "I am a biologist."
              publicEmail: "jane@public.com"
              github: "https://github.com/jane"
              orcid: "123-412-1234-123"
              twitter: "@jane"
              website: "https://www.jane.com"
              googleScholar: "janejane"
            }
    500:
      body:
        application/json:
          example: |
            {
              error : "Error creating user"
            }
put:
  description: Update the user with the given username
  body:
    application/json:
      formParameters:
        userId: 
          description: id of the user to be updated
          required: true
        email: 
          description: email for user
        firstName:
          description: first name of the User
        lastName:
          description: first name of the User
        image:
          description: image for the User
        bio: 
          description: bio for the User
        publicEmail: 
          description: email that will be publicly displayed for the User
        github: 
          description: github for the User
        orcid: 
          description: orcid for the User
        twitter: 
          description: twitter for the User
        website: 
          description: website for the User
        googleScholar: 
          description: googleScholar for the User
          
  responses:
    200:
      body:
        application/json:
          example: |
            {
              username: "jane"
              firstName: "Jane"
              lastName: "Sanchez"
              image: "https://images.com/1234"
              email: "jane@email.com"
              bio: "I am a biologist."
              publicEmail: "jane@public.com"
              github: "https://github.com/jane"
              orcid: "123-412-1234-123"
              twitter: "@jane"
              website: "https://www.jane.com"
              googleScholar: "janejane"
            }
    500:
      body:
        application/json:
          example: |
            {
              error : "Error updating user"
            }
delete:
  description: Delete the user with the given username
  body:
    application/json:
      formParameters:
        username: 
          description: username of the user to be deleted
  responses:
    200:
      body:
        application/json:
          example: "User account set inactive"
    500:
      body:
        application/json:
          example: |
            {
              error : "User not found"
            }
/labels: !include ../userLabels/userLabels.raml            