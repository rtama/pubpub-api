#%RAML 0.8
title: PubPub API
documentation:
  - title: Introduction
    content: |
      This API provides access to the PubPub database.
      All requests and responses are in the form of application/json.
      Requests should be made to the following URL paths added to the hostname
      https://v2-api.pubpub.org. For example https://v2-api.pubpub.org/user?username=test1.
      This API and the data it uses are currently accessible through the dev frontend at https://www.pubpub.org. 

  - title: Authentication
    content: |
      Access to secured URLs is granted by one of two methods:
      1. A session cookie in the request headers
      2. [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication)
      
      The cookie method is used when interacting with the database through a (often proxied) frontend. For API requests made from scripts or bots, it is best to use Basic Auth. To test basic auth, simple URL encoding is sufficient, e.g. `https://[username]:[accessToken]@v2-api.pubpub.org/user?username=test1`

      The accessToken for each user can be found on the settings page their profile (https://www.pubpub.org/user/test1/profile). 

      For most secured routes, authentication is optional. If authenticated, private data will be returned, but if not, any publicly available data is sent. For example, the public query for a user will return their name, image, and basic profile contents. An authenticated query for a user will return that user's email and other secured fields.

  - title: Contributing
    content: |
      This API documentation and the associated server code is all open source: https://github.com/pubpub/pubpub-api. Contributions, fixes, bug reports are welcome!

      Bugs, typos, or inconsistencies can be reported on our repo ([go to Github Issues](https://github.com/pubpub/pubpub-api/issues)).

  - title: Example - Adding a Pub
    content: |
      A common use case is to programatically add pubs to PubPub. This can be achieved in a few simple steps.

      #### 1. Create a pub

      The first step is to create a pub. A Pub can be thought of as a bucket for all of the content you wish to eventually publish. Discussions, contributors, versions, and publication status are all 'owned' by the Pub. You must be authenticated ([go to docs](#Authentication)) in order to create pubs.

      To create a pub, send a `POST` request to `/pub` ([go to docs](#pub)). If succesful, this will return the newly created Pub object.  It is suggested you hang onto the value of `pub.id` as you will need it when uploading content such as files and versions to the pub.

      `POST` request sample body to `/pub`
      ```javascript
      {
        description: "Lallala"
        avatar: "https://assets.pubpub.org/_site/pub.png"
        slug: "happyurl"
        title:"My Pub Title"
      }
      ```


      #### 2. Create a version

      All content within a pub is versioned. To achieve this, a pub has a series of 'versions'. Each version is a unique list of file ids. New files replace old file ids, and a new version is created. In this way, all (versions of) files are maintained and a pub accesses them through the the version wrapper.

      To create a version, send a `POST` request to `pub/version` ([go to docs](#pub_versions)). In this version, an array of File objects must be included. If the file URL is not a pubpub URL, the file will be uploaded to pubpub so that they can be properly archived.

      `POST` request sample body to `/pub/version`
      ```javascript
      {
        pubId: 114, 
        versionMessage: "This is a new version", 
        isPublished: false, 
        files: [
          {
            name: "main.md",
            type: "text/markdown",
            url: "https://assets.pubpub.org/_testing/1483708995904.md",
            originalDate: "2008-01-06T16:44:36.128Z"
          },
          {
            name: "diffusionAnalysis.png",
            type: "image/png",
            url: "https://assets.pubpub.org/_testing/1483708995895.png"
            originalDate: "2017-01-04T12:24:36.826Z"
          }
        ]
      }
      ```
      

      #### 3. Add Contributors
        
      When a pub is created, the authenticated user who created the pub is set by default to be an author. If the pub has additional contributors, they can be added using the API. Submit a `POST` request to `pub/contributor` ([go to docs](#pub_contributors)). If you're unsure of a user's id, you can search for users by name and username using the `search/users` endpoint ([go to docs](#search_user))

      `POST` request sample body to `/pub/contributor`
      ```javascript
      {
        pubId: 114,
        userId: 6
      }
      ```
      By default, this use is added as a contributor with no read or edit permissions, and is not listed as an author. To update these parameters, send a PUT request to 
      
      PUT request to set permissions to `pub/contributor` ([go to docs](#pub_contributors)). The contributorId is the id of the object returned by the previous `POST` to `/pub/contributor`

      `PUT` request sample body to `/pub/contributor`
      ```javascript
        {
          canEdit: true,
          canRead: false,
          contributorId: 146,
          isAuthor: true,
          isHidden: false,
          pubId: 114
        }
      ```

      #### 4. Publish a version

      New versions are private by default. If a pub has no public versions, it too is private. To publish a version (and thus make the pub publicly available), send a `PUT` request to `/pub/version` ([go to docs](#pub_versions)).

      `PUT` request sample body to `/pub/version`
      ```javascript
      {
        isPublished: true,
        pubId: 114,
        versionId: 93
      }
      ```


version: v2
protocols: [ HTTPS ]
baseUri: https://v2-api.pubpub.org
mediaType: application/json

/signup: !include routes/signUp/signUp.raml
/user: !include routes/user/user.raml
/login: !include routes/login/login.raml
/logout: !include routes/logout/logout.raml
/pub: !include routes/pub/pub.raml
/journal: !include routes/journal/journal.raml
/label: !include routes/label/label.raml
/highlight: !include routes/highlight/highlight.raml
/licenses: !include routes/licenses/licenses.raml
/search: !include routes/search/search.raml
/activities: !include routes/activities/activities.raml
/follows:
  displayName: Follows
  description: Routes to manage Follow objects
  /pub: !include routes/followsPub/followsPub.raml
  /journal: !include routes/followsJournal/followsJournal.raml
  /user: !include routes/followsUser/followsUser.raml
  /label: !include routes/followsLabel/followsLabel.raml
