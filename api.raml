#%RAML 0.8
title: PubPub
documentation:
  - title: Introduction
    content: |
      The goal of this API is to give access to all of the publicly available resources on PubPub. Accessing resources or actions that require authentication will be supported soon.
      All requests and responses are in the form of application/json.
version: v1
protocols: [ HTTPS ]
baseUri: https://api.pubpub.org
mediaType: application/json
securitySchemes:
  - basic_auth:
      description: |
        Need an Access Token in an Authorization Header to access this API endpoint. Requests need to be in the format username:accessToken. Access tokens are generated on pubpub.org/user/{username}/tokens.
        Also send them base 64 encoded.
      type: Basic Authentication
      describedBy:
        headers:
          Authorization:
              description: |
                Follows the Basic Authentication protocol. A base 64 encoded username:accessToken. So an example header looks like 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='
              type: string
/user:
  description: |
    Routes to access data about PubPub Users
  displayName: User
  /{username}:
    get:
      description: |
        Get user data by username. The User's ID can alternatively be used instead of the username.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  userID: "980ca098189",
                  username: "username",
                  firstName: "Jane",
                  lastName: "Doe",
                  name: "Jane Doe",
                  image: "https://assets.pubpub.org/picture.jpg",
                  bio: "I am a porcupine",
                  publicEmail: "jane@doe.com",
                  github: "janeCodes",
                  orcid: "123-123-123-123",
                  twitter: "janedoe",
                  website: "http://www.example.com",
                  googleScholar: "janesGoogleURI",
                }
        404:
          body:
            application/json:
              example: |
                {
                  error : "User not found"
                }

/journal:
  description: |
    Routes to access data about PubPub Journals
  displayName: Journal
  /{slug}:
    get:
      description: |
        Get journal data by slug. The Journal's ID can alternatively be used instead of the slug.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  journalID: "980ca098189",
                  journalName: "Super Journal",
                  slug: "superjournal",
                  description: "This is some description of my journal",
                  logo: "https://assets.pubpub.org/picture.jpg",
                  icon: "https://assets.pubpub.org/picture2.jpg",
                  about: "This is a long-form description about the journal",
                  website: "www.superjournal.com",
                  twitter: "superJournal",
                  facebook: "facebookSuperJournal",
                  headerColor: "#ff0",
                  headerImage: "https://assets.pubpub.org/picture3.jpg",
                }
        404:
          body:
            application/json:
              example: |
                {
                  error : "Journal not found"
                }
    /featured:
      get:
        description: |
          Get data for all atoms featured by the journal. The Journal's ID can alternatively be used instead of the slug.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    journalID: "980ca098189",
                    journalName: "Super Journal",
                    slug: "superjournal",
                    atoms: [
                      {
                        atomID: "56964b73849fe43d00b7d080",
                        slug: "myDocument",
                        title: "Awesome document",
                        description: "Description of awesome document",
                        previewImage: "https://assets.pubpub.org/_site/pub.png",
                        type: "document",
                        createDate: "2016-01-13T13:04:51.764Z",
                        lastUpdated: "2016-02-23T03:55:44.231Z",
                        featureDate: "Date atom was featured."
                        collections: ["Array of collections this atom has been added to"]
                      }
                    ]
                  }
          404:
            body:
              application/json:
                example: |
                  {
                    error : "Journal not found"
                  }
    /feature:
      post:
        securedBy: [ basic_auth ]
        description:
          Feature a publication on this journal.
        queryParameters:
          #journalID:
          #  type: string
          #  required: true
          #accessToken:
          #  type: string
          #  required: true
          #accept:
          #  type: string
          #  required: true
          #pubID:
          #  type: string
          #  required: true
    /collections:
      get:
        description: |
          Get journal collection data by id. The Journal's ID can alternatively be used instead of the slug.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    journalID: "980ca098189",
                    journalName: "Super Journal",
                    slug: "superjournal",
                    collections: [
                      {
                        collectionID: "980ca098188",
                        title: "My Collection",
                        createDate: "2016-08-08T14:21:32.977Z"
                      },
                      {
                        collectionID: "980ca098187",
                        title: "Another Collection",
                        createDate: "2016-07-08T14:21:31.977Z"
                      }
                    ]
                  }
          404:
            body:
              application/json:
                example: |
                  {
                    error : "Journal not found"
                  }
    /collection/{collectionID}:
      get:
        description: |
          Get data for all atoms in a specific collection. The Journal's ID can alternatively be used instead of the slug.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    collectionID: "56962b72849fe43d00b7d080",
                    title: "Another Collection",
                    createDate: "2016-07-08T14:21:31.977Z",
                    atoms: [
                      {
                        atomID: "56964b73849fe43d00b7d080",
                        slug: "myDocument",
                        title: "Awesome document",
                        description: "Description of awesome document",
                        previewImage: "https://assets.pubpub.org/_site/pub.png",
                        type: "document",
                        createDate: "2016-01-13T13:04:51.764Z",
                        lastUpdated: "2016-02-23T03:55:44.231Z"
                      }
                    ]
                  }
          404:
            body:
              application/json:

                example: |
                  {
                    error : "Collection not found"
                  }
    /submissions:
      get:
        description: |
          Get the pubs submitted to a journal.
        queryParameters:
          accessToken:
            type: string
            required: true
        responses:
          200:

            body:
              application/json:
                example: |
                  [
                    {
                      "id": "577958fe9caas832001acd93",
                      "slug": "The Anatomy of Absurdity",
                      "title": "anatomy-absurd",
                      "description": "The la la la",
                      "createDate": "2016-09-08T17:45:25.006Z"
                    },
                    {
                      "id": "576d814a2cbcc22c00dcaa1b",
                      "slug": "consesuscats",
                      "title": "Consensus Cats",
                      "description": "Here our cats beleive",
                      "createDate": "2016-09-08T17:45:13.503Z"
                    },
                    {
                      "id": "578fa2ba9099de3700eba17d",
                      "slug": "zeus",
                      "title": "Zues and Mythology",
                      "description": "An atom about zeus and mythology",
                      "createDate": "2016-09-07T20:35:23.447Z"
                    }
                  ]
/pubs:
  description: |
    Routes to access data about Pubs
  displayName: Pubs
  /{id}:
    /submit:
      post:
        securedBy: [ basic_auth ]
        description:
          Submit a document to a journal for review and publication.
        queryParameters:
          journalID:
            type: string
            required: true
/atom:
  description: |
    Routes to create and access data about Atoms. Currently works for types: image,
    jupyter, docx and pdf.
  displayName: Atoms
  /create:
    post:
      securedBy: [ basic_auth ]
      description:
        Create an atom
      queryParameters:
        accessToken:
          type: string
        type:
          type: string
        url:
          type: string
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "577958fe9caas832001acd93",
                  "url": "www.idk.com",
                  //...add later
                },

/test:
  get:
    securedBy: [ basic_auth ]
